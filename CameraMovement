using UnityEngine;
using System.Collections;

public class CameraMovement : MonoBehaviour
{

    private float Lerpspeed = 5f;
    private float camera_floor = 4f;
    private float camera_ceiling = 7f;
    public GameObject[] player;
    private Vector3[] player_pos;
    private int numberofplayer = 0;
    private Vector3 camera_pos = Vector3.zero;
    private float CenterOfAllPlayer_X_Position, CenterOfAllPlayer_Z_Position,
                    Mean_X, Mean_Z,
                    AvgChange, max_x, min_x, max_z, min_z;

    void FixedUpdate()
    {
        //finding how many players
        player = GameObject.FindGameObjectsWithTag("Player");
        numberofplayer = player.Length;

        //player at the right most position
        max_x = 0;
        for (int i = 0; i < numberofplayer; i++)
            if (player[i].transform.position.x > max_x) max_x = player[i].transform.position.x;

        //player at the left most position
        min_x = max_x;
        for (int i = 0; i < numberofplayer; i++)
            if (player[i].transform.position.x < min_x) min_x = player[i].transform.position.x;

        //player at the upper most position
        max_z = 0;
        for (int i = 0; i < numberofplayer; i++)
            if (player[i].transform.position.z > max_z) max_z = player[i].transform.position.z;

        //player at the bottom most position
        min_z = max_z;
        for (int i = 0; i < numberofplayer; i++)
            if (player[i].transform.position.z < min_z) min_z = player[i].transform.position.z;

        //center of the players in world space
        CenterOfAllPlayer_X_Position = (max_x + min_x) / 2;
        CenterOfAllPlayer_Z_Position = (max_z + min_z) / 2;

        //mean of x and z
        Mean_X = max_x - min_x;
        Mean_Z = max_z - min_z;

        //average of both means
        AvgChange = (Mean_X + Mean_Z) / 2;

        //min and max distance of the camera
        if (AvgChange < camera_floor)
            AvgChange = camera_floor;
        if (AvgChange > camera_ceiling)
            AvgChange = camera_ceiling;

        //setting camera position
        camera_pos.x = CenterOfAllPlayer_X_Position;
        camera_pos.y = AvgChange;
        camera_pos.z = CenterOfAllPlayer_Z_Position - AvgChange;

        //lerp old camera position to new player position
        transform.position = Vector3.Lerp(transform.position, camera_pos, Lerpspeed * Time.deltaTime);
    }
}
