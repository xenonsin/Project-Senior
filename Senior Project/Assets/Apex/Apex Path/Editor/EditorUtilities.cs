// <auto-generated>
// These Unity wrappers are auto-generated.
// </auto-generated>

namespace Apex.Editor
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using Apex.WorldGeometry;
    using UnityEditor;
    using UnityEngine;

    public static class EditorUtilities
    {
        private static readonly HashSet<string> _keywords = new HashSet<string>()
        {
            "abstract", "as",  "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const", "continue",
            "decimal", "default", "delegate", "do", "double", "else", "enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for", "foreach", "goto", "if", "implicit", "in", "int", "interface",
            "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator", "out", "override", "params", "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short", "sizeof",
            "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using", "virtual", "void", "volatile", "while"
        };

        public static bool IsReservedWord(string s)
        {
            return _keywords.Contains(s);
        }

        public static string SplitToWords(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return s;
            }

            var transformer = new StringBuilder();

            transformer.Append(char.ToUpper(s[0]));
            for (int i = 1; i < s.Length; i++)
            {
                if (char.IsUpper(s, i))
                {
                    transformer.Append(" ");
                }

                transformer.Append(s[i]);
            }

            return transformer.ToString();
        }

        public static void Section(string label)
        {
            if (EditorGUI.indentLevel > 0)
            {
                EditorGUI.indentLevel -= 1;
            }

            EditorGUILayout.Separator();
            EditorGUILayout.LabelField(label);
            EditorGUI.indentLevel += 1;
        }

        public static void EnumToIntField(Rect position, SerializedProperty property, Type enumType, GUIContent label)
        {
            var currentValue = property.intValue;
            var curEnumVal = (Enum)Enum.ToObject(enumType, property.intValue);

            var newValRaw = EditorGUI.EnumMaskField(position, label, curEnumVal) as IConvertible;

            var newVal = newValRaw.ToInt32(null);
            if (newVal != currentValue)
            {
                property.intValue = newVal;
            }
        }

        public static List<SerializedProperty> GetProperties(this Editor editorInstance)
        {
            var props = new List<SerializedProperty>();

            var t = editorInstance.target.GetType();
            foreach (var f in t.GetFields(BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic))
            {
                if ((f.IsPrivate || f.IsFamily) && !Attribute.IsDefined(f, typeof(SerializeField)))
                {
                    continue;
                }

                props.Add(editorInstance.serializedObject.FindProperty(f.Name));
            }

            return props;
        }

        public static void CreateOrUpdateAsset<T>(T obj, string assetName = "", string defaultAssetSubPath = "") where T : UnityEngine.Object
        {
            string path = AssetDatabase.GetAssetPath(obj);
            if (AssetDatabase.Contains(obj))
            {
                EditorUtility.SetDirty(obj);
            }
            else
            {
                //Have to do this rather cumbersome path construction due to the workings of the AssetDatabase methods
                path = "Assets";

                var subPath = GetSubPath(defaultAssetSubPath);
                if (!string.IsNullOrEmpty(subPath))
                {
                    path = string.Concat(path, "/", subPath);
                }

                var folderId = AssetDatabase.AssetPathToGUID(path);
                if (string.IsNullOrEmpty(folderId))
                {
                    folderId = AssetDatabase.CreateFolder("Assets", subPath);
                    path = AssetDatabase.GUIDToAssetPath(folderId);
                }

                if (string.IsNullOrEmpty(assetName))
                {
                    assetName = typeof(T).Name;
                }

                path = string.Concat(path, "/", assetName, ".asset");
                path = AssetDatabase.GenerateUniqueAssetPath(path);

                AssetDatabase.CreateAsset(obj, path);

                EditorGUIUtility.PingObject(obj);
            }

            AssetDatabase.SaveAssets();
        }

        public static void RemoveAsset<T>(T obj) where T : ScriptableObject
        {
            if (AssetDatabase.Contains(obj))
            {
                string path = AssetDatabase.GetAssetPath(obj);
                AssetDatabase.DeleteAsset(path);
            }
        }

        internal static void RegisterWithComponentMaster(MonoBehaviour component)
        {
            var master = component.GetComponent<ApexComponentMaster>();
            if (master != null)
            {
                master.Register(component);
            }
        }

        internal static void CleanupComponentMaster()
        {
            foreach (var go in Selection.gameObjects)
            {
                var master = go.GetComponent<ApexComponentMaster>();
                if (master != null)
                {
                    master.Cleanup();
                }
            }
        }

        internal static Bounds SnapToGrid(GridComponent grid, Bounds targetBounds, bool expandAlongPerimeter)
        {
            var cellSize = grid.cellSize;
            var startX = grid.origin.x - (grid.sizeX * cellSize * 0.5f);
            var startZ = grid.origin.z - (grid.sizeZ * cellSize * 0.5f);
            var endX = startX + (grid.sizeX * cellSize);
            var endZ = startZ + (grid.sizeZ * cellSize);

            targetBounds = targetBounds.Intersection(grid.bounds);

            var boundsMinX = targetBounds.min.x;
            var boundsMinZ = targetBounds.min.z;
            var boundsMaxX = targetBounds.max.x;
            var boundsMaxZ = targetBounds.max.z;

            if (expandAlongPerimeter)
            {
                var dxMin = targetBounds.min.x - startX;
                var dzMin = targetBounds.min.z - startZ;
                var dxMax = endX - targetBounds.max.x;
                var dzMax = endZ - targetBounds.max.z;

                var dMin = Mathf.Min(dxMin, dzMin, dxMax, dzMax);
                if (dMin == dxMin || dMin == dxMax)
                {
                    boundsMinZ = startZ;
                    boundsMaxZ = endZ;
                }
                else if (dMin == dzMin || dMin == dzMax)
                {
                    boundsMinX = startX;
                    boundsMaxX = endX;
                }
            }

            var minX = AdjustMin(startX, boundsMinX, cellSize) + 0.05f;
            var minZ = AdjustMin(startZ, boundsMinZ, cellSize) + 0.05f;
            var maxX = AdjustMax(endX, boundsMaxX, cellSize) - 0.05f;
            var maxZ = AdjustMax(endZ, boundsMaxZ, cellSize) - 0.05f;

            targetBounds.SetMinMax(new Vector3(minX, targetBounds.min.y, minZ), new Vector3(maxX, targetBounds.max.y, maxZ));
            return targetBounds;
        }

        internal static Bounds SnapToGridEdge(GridComponent grid, Bounds targetBounds, bool expandAlongPerimeter)
        {
            var cellSize = grid.cellSize;
            var startX = grid.origin.x - (grid.sizeX * cellSize * 0.5f);
            var startZ = grid.origin.z - (grid.sizeZ * cellSize * 0.5f);
            var endX = startX + (grid.sizeX * cellSize);
            var endZ = startZ + (grid.sizeZ * cellSize);

            targetBounds = targetBounds.Intersection(grid.bounds);

            var boundsMinX = targetBounds.min.x;
            var boundsMinZ = targetBounds.min.z;
            var boundsMaxX = targetBounds.max.x;
            var boundsMaxZ = targetBounds.max.z;

            var dxMin = boundsMinX - startX;
            var dzMin = boundsMinZ - startZ;
            var dxMax = endX - boundsMaxX;
            var dzMax = endZ - boundsMaxZ;

            var dMin = Mathf.Min(dxMin, dzMin, dxMax, dzMax);
            if (dMin == dxMax)
            {
                boundsMaxX = endX;
                boundsMinX = endX - cellSize;
            }
            else if (dMin == dxMin)
            {
                boundsMinX = startX;
                boundsMaxX = startX + cellSize;
            }
            else if (dMin == dzMax)
            {
                boundsMaxZ = endZ;
                boundsMinZ = endZ - cellSize;
            }
            else if (dMin == dzMin)
            {
                boundsMinZ = startZ;
                boundsMaxZ = startZ + cellSize;
            }

            if (expandAlongPerimeter)
            {
                if (dMin == dxMin || dMin == dxMax)
                {
                    boundsMinZ = startZ;
                    boundsMaxZ = endZ;
                }
                else if (dMin == dzMin || dMin == dzMax)
                {
                    boundsMinX = startX;
                    boundsMaxX = endX;
                }
            }

            var minX = AdjustMin(startX, boundsMinX, cellSize) + 0.05f;
            var minZ = AdjustMin(startZ, boundsMinZ, cellSize) + 0.05f;
            var maxX = AdjustMax(endX, boundsMaxX, cellSize) - 0.05f;
            var maxZ = AdjustMax(endZ, boundsMaxZ, cellSize) - 0.05f;

            targetBounds.SetMinMax(new Vector3(minX, targetBounds.min.y, minZ), new Vector3(maxX, targetBounds.max.y, maxZ));
            return targetBounds;
        }

        internal static bool MouseToWorldPoint(Plane ground, out Vector3 point)
        {
            var ray = HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);
            RaycastHit hitInfo;
            if (Physics.Raycast(ray, out hitInfo, float.PositiveInfinity, Layers.terrain))
            {
                point = hitInfo.point;
                return true;
            }

            float hit;
            if (!ground.Raycast(ray, out hit))
            {
                point = Vector3.zero;
                return false;
            }

            point = ray.GetPoint(hit);
            return true;
        }

        private static float AdjustMin(float limit, float curMin, float cellSize)
        {
            curMin = Mathf.Max(limit, curMin);
            var deltaMin = curMin - limit;
            deltaMin = (deltaMin / cellSize) - Mathf.Floor(deltaMin / cellSize);

            return curMin - (deltaMin * cellSize);
        }

        private static float AdjustMax(float limit, float curMax, float cellSize)
        {
            curMax = Mathf.Min(limit, curMax);
            var deltaMax = limit - curMax;
            deltaMax = (deltaMax / cellSize) - Mathf.Floor(deltaMax / cellSize);

            return curMax + (deltaMax * cellSize);
        }

        private static string GetSubPath(string path)
        {
            if (string.IsNullOrEmpty(path) || path.Equals("Assets", StringComparison.OrdinalIgnoreCase))
            {
                return string.Empty;
            }

            return path.Trim('/', '\\');
        }
    }
}